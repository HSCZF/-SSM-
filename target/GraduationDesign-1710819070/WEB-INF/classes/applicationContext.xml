<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/tx
        https://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

    <!--
        头文件配置注意的坑： spring-tx.xsd要配置成 spring-tx.4.3.xsd,
                         要与pom.xml的坐标版本号前缀一致，不配置的时候，因为本地仓库有许多的不同的版本号，导致xml初始化失败
            org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 14 in XML document from class path resource [applicationContext.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 14; columnNumber: 67; cvc-elt.1: 找不到元素 'beans' 的声明。
            Caused by: org.xml.sax.SAXParseException; lineNumber: 14; columnNumber: 67; cvc-elt.1: 找不到元素 'beans' 的声明。
     -->

    <!-- 引入db.properties -->
    <context:property-placeholder location="classpath:db.properties"></context:property-placeholder>

    <!-- 和springmvc.xml不同的是，mvc只扫描Controller,而这里让它扫描除了Controller外的所有包 -->
    <context:component-scan base-package="com.czf">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- ==============================配置数据源 =======================-->
    <bean id="pooledDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driverClass}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.user}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!-- ========================配置mybatis.xml的整合 ===========================-->
    <!-- 配置sessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 指定mybatis全局配置文件位置 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <property name="dataSource" ref="pooledDataSource"></property>
        <!-- 指定mybatis，mapper文件的位置 -->
        <property name="mapperLocations" value="classpath*:mapper/*.xml"></property>

    </bean>

    <!-- 配置扫描器,自动生成dao-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描所有dao接口的实现，加入到ioc容器中 -->
        <property name="basePackage" value="com.czf.dao"></property>
    </bean>

    <!-- =========================================================================== -->
    <!-- 配置一个可以执行批量操作的sqlSession -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
        <!--<constructor-arg name="executorType" value="BATCH"></constructor-arg>-->
        <!-- 使用"BATCH"，在插入和更新的时候，数据会丢失，所以不能设置程BATCH，也可以删除此行配置 -->
        <!--
            名称        描述
            SIMPLE     执行器执行其它语句，默认值。
            REUSE      可能重复使用prepared statements 语句
            BATCH      可以重复执行语句和批量更新
        -->
        <constructor-arg name="executorType" value="SIMPLE"></constructor-arg>
    </bean>

    <!--配置文件上传解析器-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8" />
        <property name="maxUploadSize" value="1500000"/>
    </bean>

    <!-- ===========================================事务控制 =========================-->
    <!-- 事务控制配置 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 控制数据源 -->
        <property name="dataSource" ref="pooledDataSource"></property>
    </bean>

    <!--配置事务增强，事务如何切入-->
    <tx:advice id="txAdvice">
        <tx:attributes>
            <!-- 以get开始的所有方法 -->
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="select*" read-only="true"/>
            <!-- 所有方法都是事务方法 -->
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!-- 开启基于注解的事务，使用xml配置形式的事务(必须主要的都是使用配置式) -->
    <aop:config>
        <!-- 切入表达式 -->
        <aop:pointcut id="txPoint" expression="execution(* com.czf.service.*.*(..))"/>
        <!-- 配置事务增强 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"></aop:advisor>
    </aop:config>


</beans>